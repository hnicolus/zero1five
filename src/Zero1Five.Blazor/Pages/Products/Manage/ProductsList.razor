@page "/manage/products"
@using Blazorise.Components
@using Volo.Abp.Application.Dtos
@using Zero1Five.Blazor
@using Zero1Five.Categories
@using Zero1Five.Localization
@using Zero1Five.Products
@using Zero1Five.Gigs
@using Volo.Abp.AspNetCore.Components.Web
@inherits Zero1FiveComponentBase
@using Blazorise
@inject AbpBlazorMessageLocalizerHelper<Zero1FiveResource> LH
@inject ICategoryAppService CategoryAppService
<MudContainer>
    <MudGrid>
        <MudItem sm="6">
            <MudText Typo="Typo.h6">@L["Products"]</MudText>
        </MudItem>
        <MudItem sm="6">
            <MudButton Class="ml-auto" Variant="Variant.Filled" Color="MudBlazor.Color.Primary"
                OnClick="(e)=>OpenCreateProductModal()">
                @L["NewProduct"]
            </MudButton>
        </MudItem>
        <MudItem sm="12" xl="12" xs="12" md="12">
            <DataGrid TItem="ProductDto" Data="ProductList" ReadData="OnDataGridReadAsync" TotalItems="TotalCount"
                ShowPager="true" PageSize="PageSize">
                <DataGridColumns>

                    <DataGridColumn Width="150px" TItem="ProductDto" Field="@nameof(ProductDto.Id)" Sortable="false"
                        Caption="@L["Actions"]">
                        <DisplayTemplate>
                            <Dropdown>
                                <DropdownToggle Color="Blazorise.Color.Primary">
                                    @L["Actions"]
                                </DropdownToggle>
                                <DropdownMenu>
                                    @if (CanEditProduct)
                                        {
                                    <DropdownItem Clicked="() => OpenEditProductModal(context)">
                                        @L["Edit"]
                                    </DropdownItem>
                                    }
                                    @if (CanPublish)
                                        {
                                    @if (context.IsPublished)
                                            {
                                    <DropdownItem Clicked="()=> HandlePublish(context)">
                                        @L["UnPublish"]
                                    </DropdownItem>
                                    }
                                            else
                                            {
                                    <DropdownItem Clicked="()=>HandlePublish(context)">
                                        @L["Publish"]
                                    </DropdownItem>
                                    }
                                    }
                                    @if (CanDeleteProduct)
                                        {
                                    <DropdownItem Clicked="() => DeleteProductAsync(context)">
                                        @L["Delete"]
                                    </DropdownItem>
                                    }
                                </DropdownMenu>
                            </Dropdown>
                        </DisplayTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="ProductDto" Field="@nameof(ProductDto.Title)" Caption="@L["Title"]">
                    </DataGridColumn>

                </DataGridColumns>
            </DataGrid>
        </MudItem>

    </MudGrid>
</MudContainer>
<Modal @ref="CreateProductModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewProduct"]</ModalTitle>
                <CloseButton Clicked="CloseCreateProductModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewProduct" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewProduct.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <FieldLabel>@L["Category"]</FieldLabel>
                    <SelectList TItem="CategoryDto" TValue="Guid" Data="@CategoryList" TextField="@((item)=>item.Name)"
                        ValueField="@((item)=>item.Id)" SelectedValue="@SelectedCategory.Id"
                        SelectedValueChanged="SelectedCategoryChangedHandler" />
                    <FieldLabel>@L["Gig"]</FieldLabel>
                    <SelectList TItem="GigLookUpDto" TValue="Guid" Data="@GigList" TextField="@((item)=>item.Title)"
                        ValueField="@((item)=>item.Id)" SelectedValue="@SelectedGig.Id"
                        SelectedValueChanged="SelectedGigChangedHandler" />
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["CoverImage"]</FieldLabel>
                            <TextEdit Rows="5" @bind-Text="@NewProduct.CoverImage">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit Rows="5" @bind-Text="@NewProduct.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <MudButton Class="mx-3" Color="MudBlazor.Color.Secondary" Variant="Variant.Filled"
                    OnClick="((e)=>CloseCreateProductModal())">
                    @L["Cancel"]
                </MudButton>
                <MudButton Color="MudBlazor.Color.Primary" Variant="Variant.Filled" PreventDefaultOnSubmit="true"
                    OnClick="((e)=>CreateProductAsync())">
                    @L["Save"]
                </MudButton>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="EditProductModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingProduct.Title</ModalTitle>
                <CloseButton Clicked="CloseEditProductModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@EditingProduct" ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingProduct.Title">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <FieldLabel>@L["Category"]</FieldLabel>
                    <SelectList TItem="CategoryDto" TValue="Guid" Data="@CategoryList" TextField="@((item)=>item.Name)"
                        ValueField="@((item)=>item.Id)" SelectedValue="@SelectedCategory.Id"
                        SelectedValueChanged="SelectedCategoryChangedHandler" />
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["CoverImage"]</FieldLabel>
                            <TextEdit Rows="5" @bind-Text="@EditingProduct.CoverImage">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Description"]</FieldLabel>
                            <MemoEdit Rows="5" @bind-Text="@EditingProduct.Description">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <MudButton Color="MudBlazor.Color.Secondary" OnClick="((e)=>CloseEditProductModal())">
                    @L["Cancel"]
                </MudButton>
                <MudButton Color="MudBlazor.Color.Primary" PreventDefaultOnSubmit="true"
                    OnClick="((e)=>UpdateProductAsync())">
                    @L["Save"]
                </MudButton>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>